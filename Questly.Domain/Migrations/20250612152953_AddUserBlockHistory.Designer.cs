// <auto-generated />
using System;
using DataModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Questly.Domain.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250612152953_AddUserBlockHistory")]
    partial class AddUserBlockHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataModels.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_category");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_city");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("c_created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_description");

                    b.Property<int>("Goal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("c_goal");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_icon_url");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("boolean")
                        .HasColumnName("c_is_partner");

                    b.Property<float?>("Lat")
                        .HasColumnType("real")
                        .HasColumnName("c_lat");

                    b.Property<float?>("Lon")
                        .HasColumnType("real")
                        .HasColumnName("c_lon");

                    b.Property<int>("RewardScore")
                        .HasColumnType("integer")
                        .HasColumnName("c_reward_score");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("c_title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("DataModels.AchievementCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("AchievementCategories");
                });

            modelBuilder.Entity("DataModels.Authorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasMaxLength(640)
                        .HasColumnType("character varying(640)")
                        .HasColumnName("c_auth_token");

                    b.Property<string>("AuthTokenHash")
                        .IsRequired()
                        .HasMaxLength(640)
                        .HasColumnType("character varying(640)")
                        .HasColumnName("c_auth_token_hash");

                    b.Property<string>("GoogleToken")
                        .HasMaxLength(1560)
                        .HasColumnType("character varying(1560)")
                        .HasColumnName("c_google_token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("DataModels.BlockUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("BlockStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("b_block_status");

                    b.Property<DateTime>("ModifDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("d_modif_datetime");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_reason");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlockUserHistory");
                });

            modelBuilder.Entity("DataModels.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_description");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("c_lat");

                    b.Property<double?>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("c_lng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DataModels.Leaderboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_city");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("c_score");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Leaderboard");
                });

            modelBuilder.Entity("DataModels.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_address");

                    b.Property<float>("CommissionRate")
                        .HasColumnType("real")
                        .HasColumnName("c_commission_rate");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("c_company_name");

                    b.Property<long>("ContactPhone")
                        .HasMaxLength(11)
                        .HasColumnType("bigint")
                        .HasColumnName("c_contact_phone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("c_is_active");

                    b.Property<string>("OwnerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_owner_email");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("DataModels.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AchievementId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_achievement_id");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_city");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("c_description");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_icon_url");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("boolean")
                        .HasColumnName("c_is_partner");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("c_lat");

                    b.Property<double?>("Lng")
                        .HasColumnType("double precision")
                        .HasColumnName("c_lng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("c_name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_partner_id");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_type_id");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("CityId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("DataModels.PlaceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("c_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("PlaceTypes");
                });

            modelBuilder.Entity("DataModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_avatar_url");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_block_reason");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("c_created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(156)
                        .HasColumnType("character varying(156)")
                        .HasColumnName("c_email");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("b_admin");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("b_blocked");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("c_username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataModels.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_achievement_id");

                    b.Property<DateTime>("EarnedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("c_earned_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("b_is_completed");

                    b.Property<int>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("c_progress");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_user_id");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("DataModels.Achievement", b =>
                {
                    b.HasOne("DataModels.AchievementCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DataModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DataModels.Authorization", b =>
                {
                    b.HasOne("DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModels.BlockUser", b =>
                {
                    b.HasOne("DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModels.Leaderboard", b =>
                {
                    b.HasOne("DataModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModels.Place", b =>
                {
                    b.HasOne("DataModels.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId");

                    b.HasOne("DataModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DataModels.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("DataModels.PlaceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Achievement");

                    b.Navigation("City");

                    b.Navigation("Partner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataModels.UserAchievement", b =>
                {
                    b.HasOne("DataModels.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
